# Unique name for this workflow
name: Dev Org Creation

# Definition when the workflow should run
on:
    workflow_dispatch:
    push:
        branches:
            - main
        paths-ignore:
            - 'sfdx-project.json'
            - 'README.md'

# Jobs to be executed
jobs:
    checkout_source:
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Install Volta to enforce proper node and package manager versions
            - name: 'Install Volta'
              uses: volta-cli/action@v4

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: LWC

    dev-org-test:
        runs-on: ubuntu-latest
        needs: checkout_source
        if: github.actor != 'dependabot[bot]'
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: "echo ${{ secrets.DEVHUB_SFDX_URL}} > ./SFDX_URL_STORE.txt"

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sf org login sfdx-url -f ./SFDX_URL_STORE.txt -a devhub -d

            # Create scratch org
            - name: 'Create dev org'
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1
              
            # Create New User
            - name: 'Create New User'
              run: sf org create user username=samal.nihar@gmail.com email=samal.nihar@gmail.com generatepassword=true --set-unique-username
            
            # Apply PreDeployment Steps in default org
            - name: 'Apply Pre-Deployment step'
              run: sf org disable tracking
           
            # Deploy source to dev org
            - name: 'Push source to dev org'
              run: sf project deploy start

            # Assign permissionset
            - name: 'Assign permissionset to default user'
              run: sf org assign permset -n dreamhouse

            # Apply Post Deployment Step
            - name: 'Apply Post Deployment Step'
              run: sf org enable tracking
              # run: sf project deploy start --manifest manifest/deployPackage.xml --postdestructivechanges manifest/destructiveChangesPost.xml
                
            # Import sample data
            - name: 'Import sample data'
              run: sf data tree import -p ./data/sample-data-plan.json

            # Run Apex tests in dev org
            - name: 'Run Apex tests'
              run: sf apex test run -c -r human -d ./tests/apex -w 20

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v4
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: Apex

            # Housekeeping
            #- name: 'Delete dev org'
             # if: always()
             # run: sf org delete scratch -p -o scratch-org

    trigger-packaging:
        runs-on: ubuntu-latest
        needs: dev-org-test
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Check for package changes using git diff
            - name: 'Check for package changes'
              id: checkForChanges
              run: |
                  git fetch origin ${{ github.event.before }} --depth=1
                  changedPaths=$( git diff-tree --name-only ${{ github.event.before }} $GITHUB_SHA )
                  set +e
                  hasChanges='false'
                  if [ $(echo "$changedPaths" | grep -c '^force-app') == 1 ]; then
                      hasChanges='true'
                  fi
                  echo "hasChanges=$hasChanges" >> $GITHUB_OUTPUT

            # Trigger packaging workflow if needed
            - name: 'Trigger packaging workflow if needed'
              uses: peter-evans/repository-dispatch@v3
              if: steps.checkForChanges.outputs.hasChanges == 'true'
              with:
                  token: ${{ secrets.BOT_ACCESS_TOKEN }}
                  event-type: start-packaging
                  client-payload: '{ "ref": "${{ github.ref }}", "sha": "${{ github.sha }}" }'
